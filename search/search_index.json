{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Crescent About Crescent is a fighting game engine. The menu bar above can be used to navigate to different sections.","title":"Introduction"},{"location":"#crescent","text":"","title":"Crescent"},{"location":"#about","text":"Crescent is a fighting game engine. The menu bar above can be used to navigate to different sections.","title":"About"},{"location":"configuration/configuration/","text":"Configuration Project Configuration Configuration is configured in the project's root directory with the cre_config.py . It should look like the following: from crescent_api import * configure_game ( game_tile = \"Test Game\" , window_width = 800 , window_height = 600 , resolution_width = 800 , resolution_height = 600 , target_fps = 66 , initial_node_path = \"nodes/main_node.py\" , colliders_visible = False , ) configure_assets ( audio_sources = [ AudioSource ( file_path = \"assets/audio/sfx/rainbow_orb.wav\" ), ], textures = [ Texture ( file_path = \"assets/images/characters/mor/mor_idle_sheet.png\" , wrap_s = \"clamp_to_border\" , wrap_t = \"clamp_to_border\" , filter_min = \"nearest\" , filter_mag = \"nearest\" , ), ], fonts = [ Font ( file_path = \"assets/fonts/verdana.ttf\" , uid = \"verdana-32\" , size = 32 , ) ], ) configure_inputs ( input_actions = [ InputAction ( name = \"exit\" , values = [ Input . Keyboard . ESC ]), InputAction ( name = \"play_sfx\" , values = [ Input . Keyboard . SPACE ]), ] ) Node Configuration A scene is built from a tree of nodes. These nodes can be configured in node configuration files like the one below: from crescent_api import * create_stage_nodes ( stage_nodes = [ StageNode ( name = \"TitleScreen\" , type = \"Node2D\" , tags = None , external_node_source = None , components = [ Transform2DComponent ( position = Vector2 ( 0.0 , 0.0 ), scale = Vector2 ( 1.0 , 1.0 ), rotation = 0.0 , z_index = 0 , z_index_relative_to_parent = True , ignore_camera = False , ), ScriptComponent ( class_path = \"test_games.fighter_test.src.title_screen\" , class_name = \"TitleScreen\" , ), ], children = [ StageNode ( name = \"InstructionsText\" , type = \"TextLabel\" , tags = None , external_node_source = None , components = [ Transform2DComponent ( position = Vector2 ( 130.0 , 200.0 ), scale = Vector2 ( 1.0 , 1.0 ), rotation = 0.0 , z_index = 0 , z_index_relative_to_parent = True , ignore_camera = False , ), TextLabelComponent ( uid = \"fight-64\" , text = \"Press Enter to Play!\" , color = Color ( 255 , 255 , 255 ), ), ], children = [], ), StageNode ( name = \"ModeText\" , type = \"TextLabel\" , tags = None , external_node_source = None , components = [ Transform2DComponent ( position = Vector2 ( 80.0 , 300.0 ), scale = Vector2 ( 1.0 , 1.0 ), rotation = 0.0 , z_index = 0 , z_index_relative_to_parent = True , ignore_camera = False , ), TextLabelComponent ( uid = \"fight-64\" , text = \"Mode:\" , color = Color ( 255 , 255 , 255 ), ), ], children = [], ), StageNode ( name = \"ConnectText\" , type = \"TextLabel\" , tags = None , external_node_source = None , components = [ Transform2DComponent ( position = Vector2 ( 60.0 , 390.0 ), scale = Vector2 ( 1.0 , 1.0 ), rotation = 0.0 , z_index = 0 , z_index_relative_to_parent = True , ignore_camera = False , ), TextLabelComponent ( uid = \"fight-64\" , text = \"Waiting for connection...\" , color = Color ( 255 , 255 , 255 , 0 ), ), ], children = [], ), ], ) ] )","title":"Configuration"},{"location":"configuration/configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/configuration/#project-configuration","text":"Configuration is configured in the project's root directory with the cre_config.py . It should look like the following: from crescent_api import * configure_game ( game_tile = \"Test Game\" , window_width = 800 , window_height = 600 , resolution_width = 800 , resolution_height = 600 , target_fps = 66 , initial_node_path = \"nodes/main_node.py\" , colliders_visible = False , ) configure_assets ( audio_sources = [ AudioSource ( file_path = \"assets/audio/sfx/rainbow_orb.wav\" ), ], textures = [ Texture ( file_path = \"assets/images/characters/mor/mor_idle_sheet.png\" , wrap_s = \"clamp_to_border\" , wrap_t = \"clamp_to_border\" , filter_min = \"nearest\" , filter_mag = \"nearest\" , ), ], fonts = [ Font ( file_path = \"assets/fonts/verdana.ttf\" , uid = \"verdana-32\" , size = 32 , ) ], ) configure_inputs ( input_actions = [ InputAction ( name = \"exit\" , values = [ Input . Keyboard . ESC ]), InputAction ( name = \"play_sfx\" , values = [ Input . Keyboard . SPACE ]), ] )","title":"Project Configuration"},{"location":"configuration/configuration/#node-configuration","text":"A scene is built from a tree of nodes. These nodes can be configured in node configuration files like the one below: from crescent_api import * create_stage_nodes ( stage_nodes = [ StageNode ( name = \"TitleScreen\" , type = \"Node2D\" , tags = None , external_node_source = None , components = [ Transform2DComponent ( position = Vector2 ( 0.0 , 0.0 ), scale = Vector2 ( 1.0 , 1.0 ), rotation = 0.0 , z_index = 0 , z_index_relative_to_parent = True , ignore_camera = False , ), ScriptComponent ( class_path = \"test_games.fighter_test.src.title_screen\" , class_name = \"TitleScreen\" , ), ], children = [ StageNode ( name = \"InstructionsText\" , type = \"TextLabel\" , tags = None , external_node_source = None , components = [ Transform2DComponent ( position = Vector2 ( 130.0 , 200.0 ), scale = Vector2 ( 1.0 , 1.0 ), rotation = 0.0 , z_index = 0 , z_index_relative_to_parent = True , ignore_camera = False , ), TextLabelComponent ( uid = \"fight-64\" , text = \"Press Enter to Play!\" , color = Color ( 255 , 255 , 255 ), ), ], children = [], ), StageNode ( name = \"ModeText\" , type = \"TextLabel\" , tags = None , external_node_source = None , components = [ Transform2DComponent ( position = Vector2 ( 80.0 , 300.0 ), scale = Vector2 ( 1.0 , 1.0 ), rotation = 0.0 , z_index = 0 , z_index_relative_to_parent = True , ignore_camera = False , ), TextLabelComponent ( uid = \"fight-64\" , text = \"Mode:\" , color = Color ( 255 , 255 , 255 ), ), ], children = [], ), StageNode ( name = \"ConnectText\" , type = \"TextLabel\" , tags = None , external_node_source = None , components = [ Transform2DComponent ( position = Vector2 ( 60.0 , 390.0 ), scale = Vector2 ( 1.0 , 1.0 ), rotation = 0.0 , z_index = 0 , z_index_relative_to_parent = True , ignore_camera = False , ), TextLabelComponent ( uid = \"fight-64\" , text = \"Waiting for connection...\" , color = Color ( 255 , 255 , 255 , 0 ), ), ], children = [], ), ], ) ] )","title":"Node Configuration"},{"location":"python_api/assets/","text":"Audio Source Engine representation of an audio source. Properties file_path : str File path of the audio source. Methods None. Font Engine representation of a font. Properties file_path : str File path of the font. uid : str Unique identifier for the font. size : int Size of the font. Methods None. Texture Engine representation of a texture. Properties file_path : str The file path of the texture. wrap_s : str The wrap s of the texture. Defaults to clamp_to_border . wrap_t : str The wrap t of the texture. Defaults to clamp_to_border . filter_min : str The filter min of the texture. Defaults to nearest . filter_mag : str The filter mag of the texture. Defaults to nearest . Methods None. Animation Engine representation of an animation. Properties name : str The name of the animation. speed : int The speed of the animation in milliseconds per frame. loops : bool Whether or not the animation loops automatically when finished. frames : List [ crescent_api . AnimationFrame ] A list of AnimationFrame s. Methods None. Animation Frame Engine representation of an animation frame. Properties frame : int Current frame number within an animation. texture_path : str The texture path of the current animation frame. draw_source : crescent_api . Rect2 The draw source rectangle of the animation frame. Methods None. Input Action Engine representation of an input action. Properties name : int The name of the input action values : List [ str ] List of input values for an action. device_id : int The device id (e.g. used for multiple controllers). Defaults to the first device at 0 . Methods None.","title":"Assets"},{"location":"python_api/assets/#audio-source","text":"Engine representation of an audio source.","title":"Audio Source"},{"location":"python_api/assets/#properties","text":"file_path : str File path of the audio source.","title":"Properties"},{"location":"python_api/assets/#methods","text":"None.","title":"Methods"},{"location":"python_api/assets/#font","text":"Engine representation of a font.","title":"Font"},{"location":"python_api/assets/#properties_1","text":"file_path : str File path of the font. uid : str Unique identifier for the font. size : int Size of the font.","title":"Properties"},{"location":"python_api/assets/#methods_1","text":"None.","title":"Methods"},{"location":"python_api/assets/#texture","text":"Engine representation of a texture.","title":"Texture"},{"location":"python_api/assets/#properties_2","text":"file_path : str The file path of the texture. wrap_s : str The wrap s of the texture. Defaults to clamp_to_border . wrap_t : str The wrap t of the texture. Defaults to clamp_to_border . filter_min : str The filter min of the texture. Defaults to nearest . filter_mag : str The filter mag of the texture. Defaults to nearest .","title":"Properties"},{"location":"python_api/assets/#methods_2","text":"None.","title":"Methods"},{"location":"python_api/assets/#animation","text":"Engine representation of an animation.","title":"Animation"},{"location":"python_api/assets/#properties_3","text":"name : str The name of the animation. speed : int The speed of the animation in milliseconds per frame. loops : bool Whether or not the animation loops automatically when finished. frames : List [ crescent_api . AnimationFrame ] A list of AnimationFrame s.","title":"Properties"},{"location":"python_api/assets/#methods_3","text":"None.","title":"Methods"},{"location":"python_api/assets/#animation-frame","text":"Engine representation of an animation frame.","title":"Animation Frame"},{"location":"python_api/assets/#properties_4","text":"frame : int Current frame number within an animation. texture_path : str The texture path of the current animation frame. draw_source : crescent_api . Rect2 The draw source rectangle of the animation frame.","title":"Properties"},{"location":"python_api/assets/#methods_4","text":"None.","title":"Methods"},{"location":"python_api/assets/#input-action","text":"Engine representation of an input action.","title":"Input Action"},{"location":"python_api/assets/#properties_5","text":"name : int The name of the input action values : List [ str ] List of input values for an action. device_id : int The device id (e.g. used for multiple controllers). Defaults to the first device at 0 .","title":"Properties"},{"location":"python_api/assets/#methods_5","text":"None.","title":"Methods"},{"location":"python_api/color/","text":"Color Engine representation of color. Properties r : float Red color. g : float Green color. b : float Blue color. a : float Alpha or transparency of the color. Methods None.","title":"Color"},{"location":"python_api/color/#color","text":"Engine representation of color.","title":"Color"},{"location":"python_api/color/#properties","text":"r : float Red color. g : float Green color. b : float Blue color. a : float Alpha or transparency of the color.","title":"Properties"},{"location":"python_api/color/#methods","text":"None.","title":"Methods"},{"location":"python_api/math/","text":"Math Engine representation of color. Properties PI : float Constant value of 3.14159 . Methods lerp ( source : float , destination : float , amount : float ) -> float Linearly interpolate between two values. Vector2 Engine representation of a two-dimensional vector. Properties x : float X coordinate. y : float Y coordinate. Methods dot_product ( value : crescent_api . Vector2 ) -> float : Returns the dot product of two Vector2 items. lerp ( source : crescent_api . Vector2 , destination : crescent_api . Vector2 , amount : float ) -> crescent_api . Vector2 : Returns the linearly interpolated value of two points. Static functions that return specific values ZERO () -> Vector2 ( 0.0 , 0.0 ): LEFT () -> Vector2 ( - 1.0 , 0.0 ): RIGHT () -> Vector2 ( 0.0 , 1.0 ): UP () -> Vector2 ( 0.0 , - 1.0 ): DOWN () -> Vector2 ( 0.0 , 1.0 ): Rect2 Engine representation of a rectangle. Properties x : float X coordinate. y : float Y coordinate. w : float Rectangle's width. h : float Rectangle's height. Methods None.","title":"Math"},{"location":"python_api/math/#math","text":"Engine representation of color.","title":"Math"},{"location":"python_api/math/#properties","text":"PI : float Constant value of 3.14159 .","title":"Properties"},{"location":"python_api/math/#methods","text":"lerp ( source : float , destination : float , amount : float ) -> float Linearly interpolate between two values.","title":"Methods"},{"location":"python_api/math/#vector2","text":"Engine representation of a two-dimensional vector.","title":"Vector2"},{"location":"python_api/math/#properties_1","text":"x : float X coordinate. y : float Y coordinate.","title":"Properties"},{"location":"python_api/math/#methods_1","text":"dot_product ( value : crescent_api . Vector2 ) -> float : Returns the dot product of two Vector2 items. lerp ( source : crescent_api . Vector2 , destination : crescent_api . Vector2 , amount : float ) -> crescent_api . Vector2 : Returns the linearly interpolated value of two points. Static functions that return specific values ZERO () -> Vector2 ( 0.0 , 0.0 ): LEFT () -> Vector2 ( - 1.0 , 0.0 ): RIGHT () -> Vector2 ( 0.0 , 1.0 ): UP () -> Vector2 ( 0.0 , - 1.0 ): DOWN () -> Vector2 ( 0.0 , 1.0 ):","title":"Methods"},{"location":"python_api/math/#rect2","text":"Engine representation of a rectangle.","title":"Rect2"},{"location":"python_api/math/#properties_2","text":"x : float X coordinate. y : float Y coordinate. w : float Rectangle's width. h : float Rectangle's height.","title":"Properties"},{"location":"python_api/math/#methods_2","text":"None.","title":"Methods"},{"location":"python_api/python_api/","text":"Python API Each section of the API is documented. assets color math","title":"About"},{"location":"python_api/python_api/#python-api","text":"Each section of the API is documented. assets color math","title":"Python API"}]}