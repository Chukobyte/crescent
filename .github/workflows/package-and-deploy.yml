name: package-and-deploy

on:
  push:
    branches: [ dev ]

env:
  PYTHON_VERSION: 3.10.5

jobs:
  # WINDOWS BUILD
  windows-build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v1

      - name: installing vcpkg
        run: |
          cd ..
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat

      - name: run build
        run: |
          cd ${{ github.workspace }}
          cmake . -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/../vcpkg/scripts/buildsystems/vcpkg.cmake -DIS_CI_BUILD="true"
          cmake --build . --config Release
          ren Release\crescent_engine.exe crescent_engine_windows.exe
          ren Release\crescent_engine_editor.exe crescent_engine_editor_windows.exe

      - name: run unit tests
        run: |
          echo "Running seika tests!"
          cd ${{ github.workspace }}
          ${{ github.workspace }}\Release\seika_test.exe
          echo ""
          echo "Running crescent engine tests!"
          ${{ github.workspace }}\Release\crescent_engine_test.exe
          echo ""
          echo "Running crescent engine editor tests!"
          ${{ github.workspace }}\Release\crescent_engine_editor_test.exe

      - name: package dlls (and python zip)
        run: |
          cd ..
          mkdir -p windows_run_dependencies
          copy vcpkg\buildtrees\brotli\x64-windows-rel\brotlicommon.dll windows_run_dependencies\
          copy vcpkg\buildtrees\brotli\x64-windows-rel\brotlidec.dll windows_run_dependencies\
          copy vcpkg\buildtrees\bzip2\x64-windows-rel\bz2.dll windows_run_dependencies\
          copy vcpkg\buildtrees\freetype\x64-windows-rel\freetype.dll windows_run_dependencies\
          copy vcpkg\buildtrees\libpng\x64-windows-rel\libpng16.dll windows_run_dependencies\
          copy vcpkg\packages\python3_x64-windows\bin\python310.dll windows_run_dependencies\
          copy vcpkg\buildtrees\sdl2\x64-windows-rel\SDL2.dll windows_run_dependencies\
          copy vcpkg\buildtrees\zlib\x64-windows-rel\zlib1.dll windows_run_dependencies\
          Invoke-WebRequest -URI "https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/python-${{ env.PYTHON_VERSION }}-embed-win32.zip" -OutFile python-${{ env.PYTHON_VERSION }}-embed-win32.zip
          Expand-Archive -Path python-${{ env.PYTHON_VERSION }}-embed-win32.zip -DestinationPath python-310_5_embed
          copy python-310_5_embed\python310.zip windows_run_dependencies\
          Compress-Archive -Path windows_run_dependencies -DestinationPath ${{ github.workspace }}\windows_run_dependencies.zip

      - name: store engine binary
        uses: actions/upload-artifact@v3
        with:
          name: crescent_engine_windows.exe
          path: Release\crescent_engine_windows.exe
          if-no-files-found: error

      - name: store editor binary
        uses: actions/upload-artifact@v3
        with:
          name: crescent_engine_editor_windows.exe
          path: Release\crescent_engine_editor_windows.exe
          if-no-files-found: error

      - name: store windows deps
        uses: actions/upload-artifact@v3
        with:
          name: windows_run_dependencies.zip
          path: windows_run_dependencies.zip
          if-no-files-found: error

  # LINUX BUILD
  linux-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: install dependencies
        run: |
          sudo apt install gcc-11
          sudo apt install g++-11
          sudo apt install libgl1-mesa-dev libglu1-mesa-dev
          wget -O cmake.sh https://cmake.org/files/v3.20/cmake-3.20.1-linux-x86_64.sh
          sudo sh cmake.sh --skip-license --exclude-subdir --prefix=/usr/local
          export PATH=/usr/local/bin:$PATH
          cmake --version

      - name: install vcpkg
        run: |
          cd ..
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh

      - name: run build
        run: |
          cd ${{ github.workspace }}
          cmake . -DCMAKE_BUILD_TYPE=Release -DVIDEO_OPENGL=ON -DVIDEO_X11=ON -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-11 -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/../vcpkg/scripts/buildsystems/vcpkg.cmake -DIS_CI_BUILD="true"
          cmake --build . --config Release
          mv crescent_engine crescent_engine_linux
          mv crescent_engine_editor crescent_engine_editor_linux
          chmod +x crescent_engine_linux
          chmod +x crescent_engine_editor_linux

      - name: run unit tests
        run: |
          cd ${{ github.workspace }}
          echo "Running seika tests!"
          ./seika_test
          echo ""
          echo "Running crescent engine tests!"
          ./crescent_engine_test
          echo ""
          echo "Running crescent engine editor tests!"
          ./crescent_engine_editor_test

      - name: store engine binary
        uses: actions/upload-artifact@v3
        with:
          name: crescent_engine_linux
          path: crescent_engine_linux
          if-no-files-found: error

      - name: store editor binary
        uses: actions/upload-artifact@v3
        with:
          name: crescent_engine_editor_linux
          path: crescent_engine_editor_linux
          if-no-files-found: error

  # MACOSX BUILD
  macosx-build:
    runs-on: macOS-latest

    steps:
      - uses: actions/checkout@v1

      - name: install vcpkg
        run: |
          cd ..
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh

      - name: install dependencies
        run: |
          brew install pkg-config

      - name: run build
        run: |
          cd ${{ github.workspace }}
          cmake . -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/../vcpkg/scripts/buildsystems/vcpkg.cmake -DIS_CI_BUILD="true"
          cmake --build . --config Release
          mv crescent_engine crescent_engine_macosx
          chmod +x crescent_engine_macosx

      - name: run unit tests
        run: |
          cd ${{ github.workspace }}
          echo "Running seika tests!"
          ./seika_test
          echo ""
          echo "Running crescent engine tests!"
          ./crescent_engine_test

      - name: download macosx python embed
        uses: dawidd6/action-download-artifact@v2
        with:
          name: python-${{ env.PYTHON_VERSION }}-embed-macosx.zip
          workflow: python-embedded-package.yml
          search_artifacts: true
          if_no_artifact_found: fail

      - name: prepare macosx python package
        run: |
          unzip python-${{ env.PYTHON_VERSION }}-embed-macosx.zip -d embed_python_macosx

      - name: decode private key and cert
        run: |
          echo "${{ secrets.MAC_CERT_KEY }}" >> cert.txt
          echo "${{ secrets.MAC_PKEY }}" >> pkey.txt
          base64 -D -i cert.txt -o cert.cer
          base64 -D -i pkey.txt -o private.key

      - name: setup keychain
        run: |
          security create-keychain -p '${{ secrets.MAC_KEYCHAIN_PASS }}' build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p '${{ secrets.MAC_KEYCHAIN_PASS }}' build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

      - name: import private key
        run: |
          security import private.key -A -k build.keychain

      - name: import cert
        run: |
          security import cert.cer -A -k build.keychain

      - name: set up code signing
        run: |
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.MAC_KEYCHAIN_PASS }}" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: sign app
        run: |
          codesign -s "${{ secrets.MAC_SIGNING_ID }}" -v crescent_engine_macosx
          # Will probably need to sign other embedded python files, but only doing these for now...
          codesign -s "${{ secrets.MAC_SIGNING_ID }}" -v embed_python_macosx/lib/python3.10/lib-dynload/_struct.cpython-310-darwin.so
          codesign -s "${{ secrets.MAC_SIGNING_ID }}" -v embed_python_macosx/lib/python3.10/lib-dynload/_json.cpython-310-darwin.so
          codesign -s "${{ secrets.MAC_SIGNING_ID }}" -v embed_python_macosx/lib/python3.10/lib-dynload/_pickle.cpython-310-darwin.so
          codesign -s "${{ secrets.MAC_SIGNING_ID }}" -v embed_python_macosx/lib/python3.10/lib-dynload/math.cpython-310-darwin.so
          cd embed_python_macosx
          zip -r ${{ github.workspace }}/embed_python_macosx.zip *

      - name: create macos export template
        run: |
          mkdir -p crescent.app/Contents/MacOS
          mkdir -p crescent.app/Contents/Resources
          echo "${{ secrets.MAC_PLIST_CONTENT }}" >> crescent.app/Contents/Info.plist
          chmod -R 755 crescent.app
          zip -r crescent_macosx_export_template.zip crescent.app/

      - name: store engine binary
        uses: actions/upload-artifact@v3
        with:
          name: crescent_engine_macosx
          path: crescent_engine_macosx
          if-no-files-found: error

      - name: store signed embedded python package
        uses: actions/upload-artifact@v3
        with:
          name: embed_python_macosx.zip
          path: embed_python_macosx.zip
          if-no-files-found: error

      - name: store macosx export template
        uses: actions/upload-artifact@v3
        with:
          name: crescent_macosx_export_template.zip
          path: crescent_macosx_export_template.zip
          if-no-files-found: error

  package-all:
    runs-on: ubuntu-latest
    needs: [windows-build, linux-build, macosx-build]

    steps:
      - uses: actions/checkout@v1

      - name: install pip packages
        run: |
          python3 -m pip install google-auth google-api-python-client

      - name: setup directories
        run: |
          # Windows
          mkdir -p crescent_windows/bin/windows
          mkdir -p crescent_windows/bin/linux
          mkdir -p crescent_windows/bin/macosx
          # Linux
          mkdir -p crescent_linux/bin/windows
          mkdir -p crescent_linux/bin/linux
          mkdir -p crescent_linux/bin/macosx
          # Macosx
          mkdir -p crescent_macosx/bin/windows
          mkdir -p crescent_macosx/bin/linux
          mkdir -p crescent_macosx/bin/macosx
          # Create creds file
          cd ${{ github.workspace }}
          echo "${{ secrets.GDRIVE_CREDENTIALS }}" >> creds.json

      - name: download windows engine binary
        uses: actions/download-artifact@v3
        with:
          name: crescent_engine_windows.exe

      - name: download windows editor binary
        uses: actions/download-artifact@v3
        with:
          name: crescent_engine_editor_windows.exe

      - name: download windows deps
        uses: actions/download-artifact@v3
        with:
          name: windows_run_dependencies.zip

      - name: download linux engine binary
        uses: actions/download-artifact@v3
        with:
          name: crescent_engine_linux

      - name: download linux editor binary
        uses: actions/download-artifact@v3
        with:
          name: crescent_engine_editor_linux

      - name: download linux python embed
        uses: dawidd6/action-download-artifact@v2
        with:
          name: python-${{ env.PYTHON_VERSION }}-embed-linux.zip
          workflow: python-embedded-package.yml
          search_artifacts: true
          if_no_artifact_found: fail

      - name: download macosx signed engine binary
        uses: actions/download-artifact@v3
        with:
          name: crescent_engine_macosx

      - name: download macosx signed python package
        uses: actions/download-artifact@v3
        with:
          name: embed_python_macosx.zip

      - name: download macosx export template
        uses: actions/download-artifact@v3
        with:
          name: crescent_macosx_export_template.zip

      - name: setup python dependencies
        run: |
          # Linux
          unzip python-${{ env.PYTHON_VERSION }}-embed-linux.zip -d embed_python_linux
          # MacOSX
          unzip embed_python_macosx.zip -d embed_python_macosx

      - name: build packages
        run: |
          cd ${{ github.workspace }}
          ls -la *
          echo "building windows package"
          # Copy engine binaries
          cp crescent_engine_windows.exe crescent_windows/bin/windows/crescent_engine.exe
          cp crescent_engine_linux crescent_windows/bin/linux/crescent_engine
          cp crescent_engine_macosx crescent_windows/bin/macosx/crescent_engine
          cp -r assets crescent_windows/bin/windows
          cp -r test_games crescent_windows/bin/windows
          cp -r assets crescent_windows/bin/linux
          cp -r test_games crescent_windows/bin/linux
          cp -r assets crescent_windows/bin/macosx
          cp -r test_games crescent_windows/bin/macosx
          # Move editor
          mv crescent_engine_editor_windows.exe crescent_windows/crescent.exe
          # Copy windows runtime deps
          unzip windows_run_dependencies.zip
          cp windows_run_dependencies/*  crescent_windows/
          cp windows_run_dependencies/*  crescent_windows/bin/windows/
          cp -r embed_python_linux crescent_windows/bin/linux/embed_python
          cp -r embed_python_macosx crescent_windows/bin/macosx/embed_python
          chmod -R 755 crescent_windows
          zip -r crescent_windows.zip crescent_windows/

          echo "building linux package"
          # Copy engine binaries
          cp crescent_engine_windows.exe crescent_linux/bin/windows/crescent_engine.exe
          cp crescent_engine_linux crescent_linux/bin/linux/crescent_engine
          cp crescent_engine_macosx crescent_linux/bin/macosx/crescent_engine
          cp -r assets crescent_linux/bin/windows
          cp -r test_games crescent_linux/bin/windows
          cp -r assets crescent_linux/bin/linux
          cp -r test_games crescent_linux/bin/linux
          cp -r assets crescent_linux/bin/macosx
          cp -r test_games crescent_linux/bin/macosx
          # Move editor
          mv crescent_engine_editor_linux crescent_linux/crescent
          # Copy runtime deps
          cp windows_run_dependencies/*  crescent_linux/bin/windows/
          cp -r embed_python_linux crescent_linux/bin/linux/embed_python
          cp -r embed_python_macosx crescent_linux/bin/macosx/embed_python
          chmod -R 755 crescent_linux
          zip -r crescent_linux.zip crescent_linux/
          tar -czvf crescent_linux.tar.gz crescent_linux/

          echo "building macosx package"
          # Just build app bundle for engine as editor doesn't exist yet
          unzip crescent_macosx_export_template.zip
          chmod 755 crescent_engine_macosx
          chmod -R 755 embed_python_macosx
          # Copy over files to export template
          cp crescent_engine_macosx crescent.app/Contents/MacOS/crescent_engine
          cp -r embed_python_macosx crescent.app/Contents/MacOS/embed_python
          cp -r assets crescent.app/Contents/MacOS/assets
          cp -r test_games crescent.app/Contents/MacOS/test_games
          zip -r crescent_macosx.zip crescent.app/
          tar -czvf crescent_macosx.tar.gz crescent.app/

      - name: deploy packages
        run: |
          python -m pip install google-auth google-api-python-client
          echo "${{ secrets.GDRIVE_CREDENTIALS }}" > creds.json
          echo "deploying windows package"
          python ci/upload_to_gd.py crescent_windows.zip ${{ github.workspace }}/creds.json ${{ secrets.GDRIVE_FOLDER_ID }}
          echo "deploying linux packages"
          python ci/upload_to_gd.py crescent_linux.zip ${{ github.workspace }}/creds.json ${{ secrets.GDRIVE_FOLDER_ID }}
          python ci/upload_to_gd.py crescent_linux.tar.gz ${{ github.workspace }}/creds.json ${{ secrets.GDRIVE_FOLDER_ID }}
          echo "deploying macosx packages"
          python ci/upload_to_gd.py crescent_macosx.zip ${{ github.workspace }}/creds.json ${{ secrets.GDRIVE_FOLDER_ID }}
          python ci/upload_to_gd.py crescent_macosx.tar.gz ${{ github.workspace }}/creds.json ${{ secrets.GDRIVE_FOLDER_ID }}

      - name: create or update release draft
        run: |
          python -m pip install PyGithub urllib3 Brotli
          echo "Creating or updating release draft stub"
          python ci/create_or_update_release_draft.py ${{ secrets.CI_ACCESS_TOKEN }} crescent_windows.zip crescent_linux.zip crescent_linux.tar.gz crescent_macosx.zip crescent_macosx.tar.gz
