#pragma once

static const char* SE_OPENGL_SHADER_SOURCE_VERTEX_SPRITE =
    "#version 330 core\n"
    "\n"
    "layout (location = 0) in float ID;\n"
    "layout (location = 1) in vec2 VERTEX;\n"
    "layout (location = 2) in vec2 CRE_TEXTURE_COORDS;\n"
    "layout (location = 3) in vec4 CRE_TEXTURE_MODULATE;\n"
    "layout (location = 4) in float CRE_APPLY_NEAREST_NEIGHBOR;\n"
    "\n"
    "out vec2 UV;\n"
    "out vec4 TEXTURE_MODULATE;\n"
    "out float USING_NEAREST_NEIGHBOR;\n"
    "\n"
    "uniform sampler2D TEXTURE;\n"
    "uniform mat4 CRE_MODELS[100];\n"
    "uniform mat4 CRE_PROJECTION;\n"
    "\n"
    "//@@UNIFORMS\n"
    "\n"
    "//@@FUNCTIONS\n"
    "\n"
    "void main() {\n"
    "    int CRE_SPRITE_INT_ID = int(ID);\n"
    "    UV = CRE_TEXTURE_COORDS;\n"
    "    TEXTURE_MODULATE = CRE_TEXTURE_MODULATE;\n"
    "    USING_NEAREST_NEIGHBOR = CRE_APPLY_NEAREST_NEIGHBOR;\n"
    "    //@@vertex()\n"
    "    gl_Position = CRE_PROJECTION * CRE_MODELS[CRE_SPRITE_INT_ID] * vec4(VERTEX, 0.0f, 1.0f);\n"
    "}\n";

static const char* SE_OPENGL_SHADER_SOURCE_FRAGMENT_SPRITE =
    "#version 330 core\n"
    "\n"
    "in vec2 UV;\n"
    "in vec4 TEXTURE_MODULATE;\n"
    "in float USING_NEAREST_NEIGHBOR;\n"
    "\n"
    "out vec4 COLOR;\n"
    "\n"
    "uniform sampler2D TEXTURE;\n"
    "\n"
    "//@@UNIFORMS\n"
    "\n"
    "vec2 CRE_APPLY_NEAREST_NEIGHBOR(vec2 uv, vec2 texture_size) {\n"
    "    vec2 pixel = uv * texture_size;\n"
    "    vec2 seam = floor(pixel + 0.5);\n"
    "    vec2 dudv = fwidth(pixel);\n"
    "    pixel = seam + clamp( (pixel - seam) / dudv, -0.5, 0.5);\n"
    "    return pixel / texture_size;\n"
    "}\n"
    "\n"
    "//@@FUNCTIONS\n"
    "\n"
    "void main() {\n"
    "    vec2 CRE_SPRITE_TEXTURE_SIZE = textureSize(TEXTURE, 0);\n"
    "    vec2 CRE_SPRITE_UV = mix(UV, CRE_APPLY_NEAREST_NEIGHBOR(UV, CRE_SPRITE_TEXTURE_SIZE), USING_NEAREST_NEIGHBOR);\n"
    "    COLOR = TEXTURE_MODULATE * texture(TEXTURE, CRE_SPRITE_UV);\n"
    "    //@@fragment()\n"
    "}\n";

static const char* SE_OPENGL_SHADER_SOURCE_VERTEX_FONT =
    "#version 330 core\n"
    "layout (location = 0) in vec4 vertex; // (pos, tex)\n"
    "\n"
    "out vec2 texCoords;\n"
    "\n"
    "uniform mat4 projection;\n"
    "\n"
    "void main() {\n"
    "    gl_Position = projection * vec4(vertex.xy, 0.0f, 1.0f);\n"
    "    texCoords = vertex.zw;\n"
    "}\n";

static const char* SE_OPENGL_SHADER_SOURCE_FRAGMENT_FONT =
    "#version 330 core\n"
    "in vec2 texCoords;\n"
    "out vec4 color;\n"
    "\n"
    "uniform sampler2D textValue;\n"
    "uniform vec4 textColor;\n"
    "\n"
    "void main() {\n"
    "    vec4 sampled = vec4(1.0f, 1.0f, 1.0f, texture(textValue, texCoords).r);\n"
    "    color = textColor * sampled;\n"
    "}\n";

static const char* SE_OPENGL_SHADER_SOURCE_VERTEX_SCREEN =
    "#version 330 core\n"
    "layout (location = 0) in vec2 VERTEX;\n"
    "layout (location = 1) in vec2 CRE_TEXTURE_COORDS;\n"
    "\n"
    "out vec2 UV;\n"
    "\n"
    "uniform sampler2D TEXTURE;\n"
    "\n"
    "//@@UNIFORMS\n"
    "\n"
    "//@@FUNCTIONS\n"
    "\n"
    "void main() {\n"
    "    UV = CRE_TEXTURE_COORDS;\n"
    "    //@@vertex()\n"
    "    gl_Position = vec4(VERTEX, 0.0f, 1.0f);\n"
    "}\n";

static const char* SE_OPENGL_SHADER_SOURCE_FRAGMENT_SCREEN =
    "#version 330 core\n"
    "out vec4 COLOR;\n"
    "\n"
    "in vec2 UV;\n"
    "\n"
    "uniform sampler2D TEXTURE;\n"
    "\n"
    "//@@UNIFORMS\n"
    "\n"
    "//@@FUNCTIONS\n"
    "\n"
    "void main() {\n"
    "    COLOR = texture(TEXTURE, UV);\n"
    "    //@@fragment()\n"
    "}\n";
